{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mentoring-adf-akylk"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/SourceCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "movies"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceCSVAU')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageAU",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "ratings"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "userId",
						"type": "String"
					},
					{
						"name": "movieId",
						"type": "String"
					},
					{
						"name": "rating",
						"type": "String"
					},
					{
						"name": "timestamp",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseMovie",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "LastModifytime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "watermarktable"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data from lake to sql",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "online",
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "@{concat('truncate table ', 'stg.online_purchase')}",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['serviceName']"
										},
										"sink": {
											"name": "online_service_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['serviceCode']"
										},
										"sink": {
											"name": "online_service_code",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['movieId']"
										},
										"sink": {
											"name": "movie_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"name": "user_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['price']"
										},
										"sink": {
											"name": "price",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['id']"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['datetime']"
										},
										"sink": {
											"name": "transaction_date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['pipelineId']"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['source_filename']"
										},
										"sink": {
											"name": "source_filename",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "JsonLakeSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "OnlinePurchaseSink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Populate Online Service",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data from lake to sql",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateOnlineService]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseMovie",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Populate Online Purchase",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Populate Online Service",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateOnlinePurchase]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseMovie",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "module_7"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-22T10:49:57Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromAuToFr')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceCSVAU",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkCSV",
								"type": "DatasetReference",
								"parameters": {
									"filename": "ratings_from_aut_to_fr.csv"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-05T20:59:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceCSVAU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromBlobToDataLake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SourceCSV",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "AzureDataLakeStorage1",
													"type": "LinkedServiceReference"
												},
												"path": "log"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SourceCSV",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "SinkCSV",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@concat(replace(item().name,'.csv',''), '_', formatDatetime(utcnow(),'ddMMyyymmss'), '.csv')\n\n\n",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-06T21:02:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceCSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PopulateCast",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ForEachFileToTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCast]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseMovie",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PopulateCompany",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PopulateCast",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCompany]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseMovie",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PopulateGenre",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PopulateCompany",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateGenre]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseMovie",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PopulateMovies",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PopulateGenre",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovies]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseMovie",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PopulateMovieStatus",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PopulateMovies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovieStatus]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseMovie",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PopulateMoviesCastMap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PopulateMovieStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesCastMap]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseMovie",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PopulateMoviesCompanyMap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PopulateMoviesCastMap",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesCompanyMap]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseMovie",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PopulateMoviesGenreMap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PopulateMoviesCompanyMap",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesGenreMap]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseMovie",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PopulateRatings",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PopulateMoviesGenreMap",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulatetRatings]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseMovie",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LookupMapping",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from stg.mapping where is_active = 1",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "MappingTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachFileToTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupMapping",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupMapping').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "pipelineId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "source_filename",
													"value": "$$FILEPATH"
												}
											],
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": "movies",
												"wildcardFileName": {
													"value": "@item().src_filename",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{concat('truncate table ', 'stg.', item().trg_table)}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SourceForProcessCSVFromADLS",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationTable",
											"type": "DatasetReference",
											"parameters": {
												"table": {
													"value": "@item().trg_table",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-06T21:54:29Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/incr_etl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupOldWatermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Module_6_Source_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupNewWatermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select max(TransactionDt) as new_watermark from Tickets",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Module_6_Source_Ticket_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "IncrementalCopy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupOldWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupNewWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select * from Tickets where TransactionDt > '@{activity('LookupOldWatermark').output.firstRow.watermark}' and TransactionDt <= '@{activity('LookupNewWatermark').output.firstRow.new_watermark}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "truncate table stg.cinema_tickets",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CinemaCode",
											"type": "nvarchar"
										},
										"sink": {
											"name": "cinema_code",
											"type": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CinemaName",
											"type": "nvarchar"
										},
										"sink": {
											"name": "cinema_name",
											"type": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MovieId",
											"type": "int",
											"precision": 10
										},
										"sink": {
											"name": "movie_id",
											"type": "int",
											"precision": 10
										}
									},
									{
										"source": {
											"name": "TicketCount",
											"type": "int",
											"precision": 10
										},
										"sink": {
											"name": "ticket_count",
											"type": "int",
											"precision": 10
										}
									},
									{
										"source": {
											"name": "TicketPrice",
											"type": "decimal",
											"scale": 1,
											"precision": 4
										},
										"sink": {
											"name": "ticket_price",
											"type": "decimal",
											"scale": 1,
											"precision": 4
										}
									},
									{
										"source": {
											"name": "TransactionId",
											"type": "nvarchar"
										},
										"sink": {
											"name": "transaction_id",
											"type": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TransactionDt",
											"type": "datetime",
											"scale": 3,
											"precision": 23
										},
										"sink": {
											"name": "transaction_date",
											"type": "datetime",
											"scale": 3,
											"precision": 23
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Module_6_Source_Ticket_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Module_6_Sink_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update watermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "IncrementalCopy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[update_write_watermark]",
							"storedProcedureParameters": {
								"last_transaction_dt": {
									"value": {
										"value": "@{activity('LookupNewWatermark').output.firstRow.new_watermark}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"table_name": {
									"value": {
										"value": "@activity('LookupOldWatermark').output.firstRow.table_name",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CinemaTicketsSQLServer",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Populate cinema",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update watermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCinema]"
						},
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Populate cinema tickets",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Populate cinema",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCinemaTickets]"
						},
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "module_6"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-12T21:17:37Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/incr_etl_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup Old Watermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@activity('Lookup Old Watermark').output.firstRow.WatermarkValue",
										"type": "Expression"
									},
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"parallelCopies": 32,
							"dataIntegrationUnits": 2
						},
						"inputs": [
							{
								"referenceName": "JsonSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "JsonSink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Lookup Old Watermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "Select * from stg.watermarktable where TableName = 'online_container'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SourceDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update Watermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[stg].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "online_container",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "module_7"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-21T22:14:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupOldWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SourceDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "LookupNewWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select MAX(LastModifytime) as NewWatermarkvalue from stg.data_source_table",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SourceDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "IncrementalCopyActivity",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupOldWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupNewWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from stg.data_source_table where LastModifytime > '@{activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue}' and LastModifytime <= '@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "StoredProceduretoWriteWatermarkActivity",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "IncrementalCopyActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[stg].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@{activity('LookupOldWaterMarkActivity').output.firstRow.TableName}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Send Notification",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get URL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": {
								"value": "@activity('Get URL').output.value",
								"type": "Expression"
							},
							"body": {
								"value": "{\n    \"message\" : \"This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.\",\n    \"dataFactoryName\" : \"@{pipeline().DataFactory}\", \n    \"pipelineName\" : \"@{pipeline().Pipeline}\", \n    \"pipelineStatus\" : \"@{pipeline().RunId}\"\n   }",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get URL",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "StoredProceduretoWriteWatermarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://mentoring-key-vault-ay.vault.azure.net/secrets/email-notification-url/?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Get URL_copy1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "IncrementalCopyActivity",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://mentoring-key-vault-ay.vault.azure.net/secrets/email-notification-url/?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Send Fail Notification",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get URL_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": {
								"value": "@activity('Get URL_copy1').output.value",
								"type": "Expression"
							},
							"body": {
								"value": "{\n    \"message\" : \"This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.\",\n    \"dataFactoryName\" : \"@{pipeline().DataFactory}\", \n    \"pipelineName\" : \"@{pipeline().Pipeline}\", \n    \"pipelineStatus\" : \"@{pipeline().RunId}\",\n    \"errorMessage\" : \"@{activity('IncrementalCopyActivity').output.errors[0].Message}\"\n   }",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-04T11:53:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata Files",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FileSource_Module_9",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "ForEach",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata Files').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Lookup Metadata",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT *,\n(\n    SELECT 'TabularTranslator' AS [type],\n       (\n            SELECT it.source_field AS 'source.name',\n                   it.target_field AS 'target.name'\n            FROM etl.tControlMapping it\n            WHERE it.source_file_name = ot.source_file_name\n            FOR JSON PATH\n        ) AS map\nFOR JSON PATH, WITHOUT_ARRAY_WRAPPER\n) as mappings\nFROM etl.tControlMetadata ot\nWHERE '@{item().name}' like replace(ot.source_file_name, '*', '%')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQL_Source_Mapping_Module_9",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Copy data",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Lookup Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@concat('truncate table ', activity('Lookup Metadata').output.firstRow.dest_schema_name, '.', activity('Lookup Metadata').output.firstRow.dest_table_name)",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"value": "@activity('Lookup Metadata').output.firstRow.map",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "FileSourceForCopy_Module_9",
											"type": "DatasetReference",
											"parameters": {
												"source_file_name": {
													"value": "@item().name",
													"type": "Expression"
												},
												"source_container": {
													"value": "@activity('Lookup Metadata').output.firstRow.source_container",
													"type": "Expression"
												},
												"source_folder": {
													"value": "@activity('Lookup Metadata').output.firstRow.source_folder",
													"type": "Expression"
												},
												"source_file_delimiter": {
													"value": "@activity('Lookup Metadata').output.firstRow.source_file_delimiter",
													"type": "Expression"
												},
												"source_file_encoding": {
													"value": "@activity('Lookup Metadata').output.firstRow.source_file_encoding",
													"type": "Expression"
												},
												"source_file_escape_char": {
													"value": "@activity('Lookup Metadata').output.firstRow.source_file_escape_char",
													"type": "Expression"
												},
												"source_file_quote_char": {
													"value": "@activity('Lookup Metadata').output.firstRow.source_file_quote_char",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SQL_Sink_Table",
											"type": "DatasetReference",
											"parameters": {
												"schema_name": {
													"value": "@activity('Lookup Metadata').output.firstRow.dest_schema_name",
													"type": "Expression"
												},
												"table_name": {
													"value": "@activity('Lookup Metadata').output.firstRow.dest_table_name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "module_9"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-27T13:20:53Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Execute')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Ingestion",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyFromBlobToDataLake",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Transform",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Ingestion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessData",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Clean",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "MoveAndArchiveFiles",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-06T21:54:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyFromBlobToDataLake')]",
				"[concat(variables('factoryId'), '/pipelines/ProcessData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Incremental Files Ingestion",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "incr_etl_files",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load To DB",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Incremental Files Ingestion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyData",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Archive Files",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load To DB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Archive",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "module_7"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-22T10:49:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/incr_etl_files')]",
				"[concat(variables('factoryId'), '/pipelines/CopyData')]"
			]
		}
	]
}